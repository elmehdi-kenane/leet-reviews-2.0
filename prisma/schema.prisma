generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String       @id @default(uuid())
  userId            String       @db.Uuid
  type              String
  provider          provider
  providerAccountId String
  accountType       account_type
  username          String?
  avatar            String?
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  createdAt         Int?
  secretValidUntil  Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "Account_provider_account_id_unique")
}

model Session {
  id        String   @id
  userId    String   @db.Uuid
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                      String
  name                          String?
  isFeedbacksHidden             Boolean    @default(false)
  isCommentsAndVotesHidden      Boolean    @default(false)
  accountDisplayedWithFeedbacks provider?  @default(none)
  email                         String     @unique
  createdAt                     DateTime   @default(now())
  avatar                        String?
  bio                           String?
  accounts                      Account[]
  comments                      Comment[]
  feedbacks                     Feedback[]
  saves                         Save[]
  sessions                      Session[]
  votes                         Vote[]
}

model Feedback {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedbackType    String?
  trustScore      Int?
  experienceRate  Int?      @default(1)
  companyName     String
  companyLogo     String?   @default("")
  companyLinkedIn String?   @default("")
  companyLocation String?
  jobProgressType String?
  workingType     String?
  contractType    String?
  jobStatus       String?
  authorComment   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  authorId        String    @db.Uuid
  comments        Comment[]
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  saves           Save[]
  votes           Vote[]
}

model Vote {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedbackId String   @db.Uuid
  authorId   String   @db.Uuid
  isUp       Boolean
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedbackId String   @db.Uuid
  authorId   String   @db.Uuid
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Save {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedbackId String   @db.Uuid
  authorId   String   @db.Uuid
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([authorId, feedbackId], map: "Save_unique")
}

enum provider {
  fortyTwo
  github
  discord
  linkedIn
  none
}

enum account_type {
  AUTH
  CONNECTED
}
